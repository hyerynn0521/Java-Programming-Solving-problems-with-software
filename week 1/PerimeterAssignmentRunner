echo "# Java-Programming-Solving-problems-with-software" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/hyerynn0521/Java-Programming-Solving-problems-with-software.git
git push -u origin master

package perimeterAssignmentRunner.perimeter_quiz;

import edu.duke.*;
import java.io.File;

public class PerimeterAssignmentRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }

    public int getNumPoints (Shape s) {
        // Put code here
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        int NumPoint = 0;
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
            int NewNumPoint = NumPoint+1;
            NewNumPoint = NumPoint;
        }
        return NumPoint;
        
    }

    public double getAverageLength(Shape s) {
        // Put code here
        double AvgLength = getPerimeter(s)/getNumPoints(s);
        return AvgLength;
    }

    public double getLargestSide(Shape s) {
        // Put code here
        Point prevPt = s.getLastPoint();
        double prevDist = 0.0;
        double largerside = 0.0;
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            largerside = Math.max(prevDist, currDist);
            prevDist = largerside;
            prevPt = currPt;
            
            
        }
        // totalPerim is the answer
        
        return largerside;
    }

    public double getLargestX(Shape s) {
        // Put code here
        Point prevPt = s.getLastPoint();
        double largerPt = 0.0;
        double largerside = 0.0;
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double x1 = prevPt.getX();
            double x2 = currPt.getX();
            largerPt = Math.max(x1, x2);
            largerPt = x1;
            prevPt = currPt;
            
            
        }
        // totalPerim is the answer
        
        return largerPt;
    }

    public double getLargestPerimeterMultipleFiles() {
        // Put code here
        double largestPerim = Double.MIN_VALUE;
        DirectoryResource dr;
        dr = new DirectoryResource();
        for (File f: dr.selectedFiles()){
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            double currPerim = getPerimeter(s);
            largestPerim = largestPerim >= currPerim?largestPerim :currPerim;
        }
        
        return largestPerim;
    }
  

    public String getFileWithLargestPerimeter() {
        // Put code here
       double largestPerim = Double.MIN_VALUE;
       DirectoryResource dr = new DirectoryResource(); 
       File temp = null;    // replace this code
       for (File f : dr.selectedFiles()){
           FileResource fr = new FileResource(f);
           Shape s = new Shape(fr);
           double currPerim = getPerimeter(s);
           if (largestPerim < currPerim){
               temp = f;
               largestPerim = currPerim;
           }
       }
       return temp.getName();
       
    }

    public void testPerimeter () {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        double length = getPerimeter(s);
        System.out.println("perimeter = " + length);
        System.out.println("num of points = "+ getNumPoints(s));
        System.out.println("average length = "+ getAverageLength(s));
        System.out.println("largest side = "+ getLargestSide(s));
        System.out.println("largest x = " + getLargestX(s));
    }
    
    public void testPerimeterMultipleFiles() {
        // Put code here
        
        System.out.println("largest perimeter = " + getLargestPerimeterMultipleFiles());
    }

    public void testFileWithLargestPerimeter() {
        // Put code here
        System.out.println("file name = " + getFileWithLargestPerimeter());
    }

    // This method creates a triangle that you can use to test your other methods
    public void triangle(){
        Shape triangle = new Shape();
        triangle.addPoint(new Point(0,0));
        triangle.addPoint(new Point(6,0));
        triangle.addPoint(new Point(3,6));
        for (Point p : triangle.getPoints()){
            System.out.println(p);
        }
        double peri = getPerimeter(triangle);
        System.out.println("perimeter = "+peri);
    }

    // This method prints names of all files in a chosen folder that you can use to test your other methods
    public void printFileNames() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            System.out.println(f);
        }
    }

    public static void main (String[] args) {
        PerimeterAssignmentRunner pr = new PerimeterAssignmentRunner();
        System.out.println("Assignment 1: Calculating information about shapes");
        System.out.println("==================================================");
        pr.testPerimeter();
        
        System.out.println("\n\nAssignment 2: Processing multiple Shape files");
        System.out.println("=============================================");
        pr.testPerimeterMultipleFiles();
        pr.testFileWithLargestPerimeter();
        
    }
}

                
