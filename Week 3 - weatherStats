package WeatherData;
import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;
/**
 * Write a description of Part1 here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Part1 {
    public CSVRecord coldestHourInFile(CSVParser parser){
        
        CSVRecord smallestSoFar  = null;
        for (CSVRecord currentRow : parser){
            if (smallestSoFar == null){
                smallestSoFar = currentRow;
            }
            else{
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
                if (currentTemp < smallestTemp && currentTemp != -9999){
                    smallestSoFar = currentRow;
                }
            }
        }
        return smallestSoFar;
    }
    public void testColdestHourInFile(){
        FileResource fr = new FileResource();
        CSVRecord smallest = coldestHourInFile(fr.getCSVParser());
        System.out.println("The coldest temperature on that day was "+ smallest.get("TemperatureF"));
        
    }
    public String fileWithColdestTemperature(){
        CSVRecord smallestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        
        String smallestFileName = "";
        String currFileName = "";
        
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = coldestHourInFile(fr.getCSVParser());
            
            
            
            if (smallestSoFar == null){
                smallestSoFar = currentRow;
                currFileName = f.getName();
                smallestFileName = currFileName;
                
                
            }
            else{
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
                if (currentTemp < smallestTemp && currentTemp != -9999){
                    
                    smallestSoFar= currentRow;
                    currFileName = f.getName();
                    smallestFileName = currFileName;
                    
      
                    
                }
                
            }
        } 
        
        return smallestFileName;
    }
    
    public void testFileWithColdestTemperature(){
        String smallest = fileWithColdestTemperature();
        System.out.println("Coldest temperature was in file " + smallest);
        
        
        
        
    }
    public CSVRecord lowestHumidityInFile(CSVParser parser){
        
        CSVRecord smallestSoFar  = null;
        for (CSVRecord currentRow : parser){
            
            if (smallestSoFar == null){
                smallestSoFar = currentRow;
            }
            
            else{
                int currentHumidity = Integer.parseInt(currentRow.get("Humidity"));
                int smallestHumidity = Integer.parseInt(smallestSoFar.get("Humidity"));
                if (currentHumidity < smallestHumidity){
                    smallestSoFar = currentRow;
                }
            }
        }
        return smallestSoFar;
    }
    public void testLowestHumidityInFile(){
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord csv = lowestHumidityInFile(parser);
        System.out.println("Lowest Humidity was "+ csv.get("Humidity") + " at "+ csv.get("DateUTC"));
    }
    public CSVRecord lowestHumidityInManyFiles(){
        DirectoryResource dr = new DirectoryResource();
        CSVRecord smallestSoFar = null;
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = lowestHumidityInFile(fr.getCSVParser());
            
            if (smallestSoFar == null){
                smallestSoFar = currentRow;
            }
            else{
                double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
                double smallestHumidity = Double.parseDouble(smallestSoFar.get("Humidity"));
                if (currentHumidity < smallestHumidity){
                    smallestSoFar = currentRow;
                }
            }
        } 
        return smallestSoFar;
    }
    public void testLowestHumidityInManyFiles(){
        CSVRecord csv = lowestHumidityInManyFiles();
        System.out.println("lowest humidity of the day was "+
        csv.get("Humidity")+" at "+csv.get("DateUTC"));
    }
    public double averageTemperatureInFile(CSVParser parser){
        
        double total = 0.0;
        int count = 0;
        for (CSVRecord record: parser){
            double currentTemp = Double.parseDouble(record.get("TemperatureF"));
            total = total + currentTemp;
            count++;
        }
        return total/count;
    }
    public void testAverageTemperatureInFile(){
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double average = averageTemperatureInFile(parser);
        System.out.println("Average temperature in file is "+ average);
    }
    public double averageTemperatureWithHighHumidityInFile(CSVParser parser, int value){
        
        double total = 0.0;
        int count = 0;
        
        for (CSVRecord record: parser){
            int currentHumidity = Integer.parseInt(record.get("Humidity"));
            double currentTemp = Double.parseDouble(record.get("TemperatureF"));
            if (currentHumidity >= value){
                total = total + currentTemp;
                count++;
            }
            else{
                total = total;
            }
        }
        return total/count;
        
    }
    public void testAverageTemperatureWithHighHumidityInFile(){
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        int value=80;
        double averageWithHumidity= averageTemperatureWithHighHumidityInFile(parser, value);
        if (averageWithHumidity == 0.0){
            System.out.println("No temperatures with that humidity");
        }
        else{
            System.out.println("Average Temp when high Humidity is "+value+": "+
            averageWithHumidity);
        }
    }
}

