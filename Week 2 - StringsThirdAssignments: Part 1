package StringsThirdAssignments;

import edu.duke.*;
/**
 * Write a description of Part1 here.
 * this is not the correct answer, just uploading it to log my progress
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Part1 {
    public int findStopCodon(String dna, int startIndex, String stopCodon){
        
        int currIndex = dna.indexOf(stopCodon, startIndex +3);
        while (currIndex != -1){
            if ((currIndex - startIndex )%3 ==0){
                return currIndex;
            }
            else{
                currIndex = dna.indexOf(stopCodon, currIndex+1);
            }
            //if the index has reached the end
            
        }
        
        return -1;
    }
    public void testFindStopCodon(){
        //has stopcodon but not multiple of 3
        String dna = "GCGCGCGCCAAAATTAAGAAADS";
        int startIndex = 4;
        String stopCodon= "TAA";
        //should return 15
        int result=findStopCodon(dna, startIndex, stopCodon);
        System.out.println(result);
    }
    public String findGene( String dna, int where){
        int startIndex= dna.indexOf("ATG", where);
        int minIndex=0;
        if (startIndex == -1){
            return "";
        }
        int taaIndex = findStopCodon(dna, startIndex, "TAA");
        int tagIndex = findStopCodon(dna, startIndex, "TAG");
        int tgaIndex = findStopCodon(dna, startIndex, "TGA");
        if (taaIndex == -1 ||(tgaIndex != -1 && tgaIndex<taaIndex)){
            minIndex = tgaIndex;
        }
        else{
            minIndex = taaIndex;
      
        }
        if (minIndex == -1|| (tagIndex != -1 && tagIndex<minIndex)){
            minIndex = tagIndex;
        }
        if (minIndex == -1){
            return "";
        }
        return dna.substring(startIndex, minIndex +3);
    }
    public void testFindGene(){
        String dna = "xyxyyyyyydsfysyyyyTAATAAafdsfjj";
        System.out.println(" DNA is: "+dna);
        int where = 0;
        System.out.println("Gene is: "+findGene(dna, where));
        
        dna = "TGTGAAATGxyxyyyyyyyyyTGAAATAGCG";
        System.out.println("DNA is: "+dna);
        System.out.println("Gene is: "+findGene(dna, where));
        
        dna = "xxxyyyysfysyyssTGAdsfhhhsjTAA";
        System.out.println("DNA is: "+dna);
        System.out.println("Gene is: "+findGene(dna, where));
        
        dna = "xxxyyyysfysyyssATGdsfhhhsjTAAdsfsa";
        System.out.println("DNA is: "+dna);
        System.out.println("Gene is: "+findGene(dna, where));
    }
    public StorageResource getAllGenes(String dna){
        int startIndex = 0;
        StorageResource geneList = new StorageResource();
        for  (String s: geneList.data()){
            String currGene = findGene(dna, startIndex);
            if (currGene.isEmpty()){
                break;
            }
            geneList.add(currGene);
            startIndex = dna.indexOf(currGene, startIndex)+currGene.length();
        }
        return geneList;
    }
    public void testgetAllGenes(){
        String dna = "xxxyyyATGxxxyyyzzzTAAxxxyyyzzzATGxxxTAGxxTAAxx";
        System.out.println(getAllGenes(dna));
    }
    public double cgRatio(String dna){
        double ratio = 0;
        double cCount = 0;
        double gCount = 0;
        double totalCount = 0;
        while (true){
            String cString = "C";
            String gString = "G";
            int cStartIndex = 0;
            int gStartIndex = 0;
            int cIndex = dna.indexOf(cString, cStartIndex);
            int gIndex = dna.indexOf(gString, gStartIndex);
            if (cIndex == -1 && gIndex == -1){
                break;
            }
            else if (cIndex == -1 &&gIndex != -1){
                gCount = gCount +1;
            }
            else if (cIndex != -1 && gIndex == -1){
                cCount = cCount +1;
            }
            else if (cIndex != -1 && gIndex != -1){
                gCount = gCount +1;
                cCount = cCount +1;
            }
            totalCount = cCount + gCount;
            cStartIndex = cStartIndex + cIndex+1;
            gStartIndex = gStartIndex + gIndex+1;
            
        
        }
        return totalCount/dna.length();

    }
    public void testCgRatio(){
        String dna = "XXXXXXXCGCGCGCGXXXXXX";
        System.out.println("The ratio of C and G in this dna is");
    }
    public int countCTG(String dna){
        int startIndex = 0;
        int currIndex = dna.indexOf("CTG", startIndex);
        int ctgCount = 0;
        while (currIndex != -1){
            
            if ((currIndex - 1)%3 ==0){
                ctgCount = ctgCount +1;
                
            }
            else{
                currIndex = dna.indexOf("CTG", currIndex+1);
            }
            //if the index has reached the end
            
        }
        
        return ctgCount;
    }
    
}
